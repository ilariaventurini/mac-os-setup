{
  "files.eol": "\n",
  // Enables tab completions.
  //  - on: Tab complete will insert the best matching suggestion when pressing tab.
  //  - off: Disable tab completions.
  //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": "on",
  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 2,
  // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": true,
  // Controls whether the minimap is shown.
  "editor.minimap.enabled": false,
  "editor.linkedEditing": true,
  "editor.suggest.showStatusBar": false,
  ///////////////////////////////////////////
  // Workbench
  ///////////////////////////////////////////
  // Controls whether editors opened from Quick Open show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing).
  "workbench.editor.enablePreviewFromQuickOpen": false,
  // Controls the format of the label for an editor.
  //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
  //  - short: Show the name of the file followed by its directory name.
  //  - medium: Show the name of the file followed by its path relative to the workspace folder.
  //  - long: Show the name of the file followed by its absolute path.
  "workbench.editor.labelFormat": "short",
  // Controls the window title based on the active editor. Variables are substituted based on the context:
  // - `${activeEditorShort}`: the file name (e.g. myFile.txt).
  // - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
  // - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
  // - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
  // - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
  // - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
  // - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
  // - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
  // - `${rootName}`: name of the workspace (e.g. myFolder or myWorkspace).
  // - `${rootPath}`: file path of the workspace (e.g. /Users/Development/myWorkspace).
  // - `${appName}`: e.g. VS Code.
  // - `${remoteName}`: e.g. SSH
  // - `${dirty}`: a dirty indicator if the active editor is dirty.
  // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
  "workbench.colorTheme": "Ohlala",
  "workbench.iconTheme": "material-icon-theme",
  "workbench.editor.pinnedTabSizing": "compact", // a pinned tab will only show as icon or first letter of the editor label
  ///////////////////////////////////////////
  // Window
  ///////////////////////////////////////////
  "window.title": "${activeEditorLong}${separator}${rootName}",
  "window.confirmBeforeClose": "always",
  ///////////////////////////////////////////
  // Code languages
  ///////////////////////////////////////////
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[markdown]": {
    "editor.defaultFormatter": "yzhang.markdown-all-in-one",
    // auto save
    "editor.formatOnSave": true,
  },
  "markdown.preview.fontSize": 13,
  "markdown.preview.lineHeight": 1.3,
  "prettier.semi": false,
  //----------------------
  // Typescript
  //----------------------
  "js/ts.implicitProjectConfig.experimentalDecorators": true,
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.updateImportsOnFileMove.enabled": "always",
  //----------------------
  // VS Code Google translate
  //----------------------
  "vscodeGoogleTranslate.preferredLanguage": "English",
  //----------------------
  // Spotify
  //----------------------
  "spotify.showMuteUnmuteVolumeButton": false,
  "spotify.volumeUpButtonPriority": 0,
  "spotify.showSignOutButton": false,
  "spotify.showSignInButton": false,
  "spotify.trackInfoClickBehaviour": "play_pause",
  "spotify.unmuteButtonPriority": 0,
  "spotify.muteButtonPriority": 0,
  "spotify.muteUnmuteButtonPriority": 0,
  "spotify.signInButtonPriority": 0,
  "spotify.signOutButtonPriority": 0,
  "spotify.toggleRepeatingButtonPriority": 0,
  "spotify.toggleShufflingButtonPriority": 0,
  "spotify.volumeDownButtonPriority": 0,
  //----------------------
  // Markdownlint
  //----------------------
  "markdownlint.config": {
    "default": true,
    "MD004": false,
    "MD007": false,
    // "MD007": {
    //   "indent": 2
    // },
    "MD022": false,
    "MD025": false,
    "MD031": false,
    "MD032": false,
    "MD033": false,
    "MD034": false,
    "MD041": false,
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "gitlens.views.branches.branches.layout": "list",
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "prettier.vueIndentScriptAndStyle": true,
  "[vue]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "security.workspace.trust.untrustedFiles": "open",
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[dart]": {
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    "editor.rulers": [
      80
    ],
    "editor.selectionHighlight": false,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.suggestSelection": "first",
    "editor.tabCompletion": "onlySnippets",
    "editor.wordBasedSuggestions": "off"
  },
  "dart.debugExternalPackageLibraries": false,
  "dart.debugSdkLibraries": false,
  "svelte.enable-ts-plugin": true,
  "dart.showInspectorNotificationsForWidgetErrors": false,
  "terminal.integrated.scrollback": 1000000,
  "workbench.colorCustomizations": {
    "editor.lineHighlightBackground": "#1073cf2d",
    "editor.lineHighlightBorder": "#9fced11f"
  },
  "editor.wordWrap": "off",
  "diffEditor.wordWrap": "off",
  "editor.guides.indentation": false,
  "editor.largeFileOptimizations": false,
  "files.insertFinalNewline": true,
  "peacock.affectStatusBar": false,
  "peacock.favoriteColors": [
    {
      "name": "Ohlala green",
      "value": "#37E7AC"
    },
    {
      "name": "Ohlala cyan",
      "value": "#51FBDE"
    },
    {
      "name": "Ohlala blue",
      "value": "#00B2FF"
    },
    {
      "name": "Ohlala purple",
      "value": "#9A89B4"
    },
    {
      "name": "Ohlala lavender",
      "value": "#9B6DFF"
    },
    {
      "name": "Ohlala pink",
      "value": "#FF5CD3"
    },
    {
      "name": "Ohlala rose",
      "value": "#FF6B9D"
    },
    {
      "name": "Ohlala orange",
      "value": "#FF9970"
    },
    {
      "name": "Ohlala yellow",
      "value": "#FED604"
    },
    {
      "name": "Ohlala gray-01",
      "value": "#D9E0E8"
    },
    {
      "name": "Ohlala gray-02",
      "value": "#808182"
    },
    {
      "name": "Ohlala gray-09",
      "value": "#1F2330"
    },
    {
      "name": "Angular Red",
      "value": "#dd0531"
    },
    {
      "name": "Azure Blue",
      "value": "#007fff"
    },
    {
      "name": "JavaScript Yellow",
      "value": "#f9e64f"
    },
    {
      "name": "Mandalorian Blue",
      "value": "#1857a4"
    },
    {
      "name": "Node Green",
      "value": "#215732"
    },
    {
      "name": "React Blue",
      "value": "#61dafb"
    },
    {
      "name": "Something Different",
      "value": "#832561"
    },
    {
      "name": "Svelte Orange",
      "value": "#ff3d00"
    },
    {
      "name": "Vue Green",
      "value": "#42b883"
    }
  ],
  "editor.formatOnType": true,
  "go.toolsManagement.autoUpdate": true,
  "prettier.requireConfig": true,
  "editor.formatOnSave": true,
  "update.mode": "manual",
  "[svelte]": {
    "editor.defaultFormatter": "svelte.svelte-vscode"
  },
  "peacock.affectActivityBar": false,
  "peacock.affectSashHover": false,
  "[css]": {
    "editor.defaultFormatter": "vscode.css-language-features"
  },
  "window.zoomLevel": 1
}
